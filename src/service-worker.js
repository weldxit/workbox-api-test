/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
import { openDB } from 'idb';
clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);


async function getCachedResponseFromIndexedDB() {
  console.log('this function was called')
  try {
    const db = await openDB('my-database', 1);
    const cacheKey = 'cached-api-response';

    const tx = db.transaction('api-cache', 'readonly');
    const store = tx.objectStore('api-cache');
    const cachedResponse = await store.get(cacheKey);

    await tx.done;

    return cachedResponse || null; // Return the cached response or null if not found
  } catch (error) {
    console.error('Error retrieving cached response:', error);
    return null; // Return null in case of any errors
  }
}

registerRoute(
  'https://jsonplaceholder.org/posts', // Replace with your API endpoint
  async ({ event }) => {
    try {
      // Use StaleWhileRevalidate strategy to cache the response
      const staleWhileRevalidate = new StaleWhileRevalidate();
      const response = await staleWhileRevalidate.handle({ event });
      console.log('route', response)

      // Cache the response in IndexedDB
      const db = await openDB('my-database', 1, {
        upgrade(db) {
          db.createObjectStore('api-cache');
        },
      });

      const cacheKey = 'cached-api-response';

      const tx = db.transaction('api-cache', 'readwrite');
      const store = tx.objectStore('api-cache');
      await store.put(response.clone(), cacheKey);

      await tx.done;

      return response;
    } catch (error) {
      // Log any errors for debugging
      console.error('Error caching API response:', error);
      // You may want to return a fallback response here if necessary
      // For instance, return a previously cached response
      const cachedResponse = await getCachedResponseFromIndexedDB(); // Implement this function to retrieve the cached response
      if (cachedResponse) {
        return cachedResponse;
      } else {
        // If no cached response available, return a default response or handle it accordingly
        return new Response('Fallback response', { status: 500 });
      }
    }
  }
);



// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
